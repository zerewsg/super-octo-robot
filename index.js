// Инкапсуляция— механизм, объединяющий данные и методы работы с ними в единый объект, скрывая внутреннюю реализацию от внешнего вмешательства.  

// Наследование— принцип, позволяющий создавать новые классы на основе существующих, перенимая их свойства и методы.



// Конструктор класса — это специальный метод, который вызывается при создании объекта через new. Он инициализирует свойства экземпляра





// class Cat extends Animal {   
//     constructor(name, age, color) {
//         super(name, age);    
//         this.color = color;  
//     }

//     makeSound() {            
//         return "Мяу!";
//     }
// }

// const cat = new Cat("Мурзик", 2, "рыжий");
// console.log(cat.makeSound()); 
// console.log(cat.color);      





//  - super используется в классах JavaScript для вызова методов родительского класса. В конструкторе дочернего класса super() вызывает конструктор родительского класса, что необходимо для инициализации унаследованных свойств. Без вызова super() в конструкторе дочернего класса будет ошибка (если у родителя есть конструктор).

//    Класс создается с помощью ключевого слова class, за которым следует имя класса. Тело класса содержит методы, включая конструктор (constructor), который вызывается при создании экземпляра класса

// Ключевое слово extends позволяет создать дочерний класс, который наследует свойства и методы родительского класса. Дочерний класс может переопределять методы родителя или добавлять новые

// Нет, если у родительского класса есть конструктор. Вызов super() обязателен в конструкторе дочернего класса, иначе будет ошибка

// *Нет**, если у родительского класса есть конструктор. Вызов super() обязателен в конструкторе дочернего класса, иначе будет ошибка







